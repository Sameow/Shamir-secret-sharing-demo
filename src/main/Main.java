/*******************************************************************************
 * $Id: $
 * Copyright (c) 2009-2010 Tim Tiemens.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 *
 * Contributors:
 *     Tim Tiemens - initial API and implementation
 ******************************************************************************/
package main;

import java.io.InputStream;
import java.io.PrintStream;

import buildVer.BuildVersion;

/**
 * "Dispatch" main program.
 * Based on the first argument in args[], this calls one of:
 *   split
 *   combine
 *
 * @author tiemens
 *
 */
public final class Main
{
    /**
     * @param args from command line
     */
    public static void main(String[] args)
    {
    	//TOGGLE MODE HERE
//    	String[] arguments={"split", "-k", "3", "-n", "6", "-sS", 
//    	"WbQKvVpV2C3ViMIZew8oh1w4724Mu6CLq2H1BtZQCZMnPvK4BC4vZ1aS1CyIVtYwnWFqYSFxBXfAwBjwapxTP1VyoeyakgC3FfKQ9Z7loREJsNAiwI75ZwM9hvAMEiwAz2i3gANKKqAtm0uNBmNt0sSBhqMKQLRCTGezXmv6shweP23kGkO97gt8Q7mXJXeetXWugB45HcbrV3luIVjoRqDLuYVoJNRh25WwIR2SiYcXJEt5MW9FPWVaTj3T83G32K2m11V2C2tr9H4N5TLeUPSrqKZcbHg2Vg7V4lePY3ASTyCJymhHjEyVEPULFJUgkNwkaaSnGp9PU8wE0SAVBXBWWZJqL1GZW1cm4hFc1ZglKGcGXBhDoN3lfQ3R0TC3RxRSFcPBIOB2llLtXqMsxZaXBSucZ88yoCAOqPLLZTUhWnTjqVP1AhvBKKDZF4hGSufL5f74gqNKax8MLTEPIiXM5kX5zChhgvoTPmknzktfnSaWCgWX", "-prime4096", "-printIndiv"		
//    	};
    	String[] arguments={"combine", "-k", "3", "-prime4096",
    	"-s1", 
    	"4499610012195879729728179611988990817976405379550575222525004399321368027284960363544360542249665644842751324321056276660065239259246649544677316525839911585305558729510719666885165362698517034590772294778944145078166731178419741728495347615311184666336093285933091028587663517104529115568384256817696682478193777055941399925484722694055579564615859730534781723819535231238659698087151669620892145891732619102380862647118392061033128353330450770240047380461285680845194621107891314520758231072085658660757322514667229617349564322095627202334741254344904591505812407582509565484002753701621410594061978651723310208229373408735135497010997500119561251273785708989864481116261778371700455313742406162857150944293340206841636772077634830106247042552238933595498547361774657179578142259276049032067625189339884839976083782916945868770162054010132679352214074057887121332695413091496170615796816687857285397869474283216262922394354926485707941959152716010968103978565268880841094374836177685614133674785058475249204668993957851969881008032028086361040728156406914440604030358046644783985622714216093974042044512490219306604630050584760661609629820808155481689747390603450112002973021603065344262371120812848787",
    	"-s2", 
    	"4499610012195879729728179611988990817976405379550575222525004399321368027284960363544360542249665644842751324321056276660065239259246649544677316525839911585305558729510719666885165362698517034590772294778944145078166731178419741728495347615311184666336093285933091028587663517104529115568384256817696682478193777055941399925484722694055579564615859730534781723819535231238659698087151669620892145891732619102380862647118392061033128353330450770240047380461285680845194621107891314520758231072085658660757322514667229617349564322095627202334741254344904591505812407582509565484002753701621410594061978651723310208229373408735135497010997500119561251273785708989864481116261778371700455313742406162857150944293340206841636772077634830106247042552238933595498547361774657179578142259276049032067625189339884839976083782916945868770162054010132679352214074057887121332695413091496170615796816687857285397869474283216262922394354926485707941959152716010968103978565268880841094374836177685614133674785058475249204668993957851969881008032028086361040728156406914440604030358046644783985622714216093974042044512490219306604630050584760661609629820808155481689747390603450150807677238310416089770820837159069152",
    	"-s3", 
    	"4499610012195879729728179611988990817976405379550575222525004399321368027284960363544360542249665644842751324321056276660065239259246649544677316525839911585305558729510719666885165362698517034590772294778944145078166731178419741728495347615311184666336093285933091028587663517104529115568384256817696682478193777055941399925484722694055579564615859730534781723819535231238659698087151669620892145891732619102380862647118392061033128353330450770240047380461285680845194621107891314520758231072085658660757322514667229617349564322095627202334741254344904591505812407582509565484002753701621410594061978651723310208229373408735135497010997500119561251273785708989864481116261778371700455313742406162857150944293340206841636772077634830106247042552238933595498547361774657179578142259276049032067625189339884839976083782916945868770162054010132679352214074057887121332695413091496170615796816687857285397869474283216262922394354926485707941959152716010968103978565268880841094374836177685614133674785058475249204668993957851969881008032028086361040728156406914440604030358046644783985622714216093974042044512490219306604630050584760661609629820808155481689747390603450190557588465199179759737271133631161663"
    	};
        main(arguments, System.in, System.out, true);
    }

    public static void main(String[] args,
                            InputStream in,
                            PrintStream out,
                            boolean callExit)
    {	 
        if (args.length < 1)
        {
            out.println("Error: must supply at least 1 argument");
            usage(out);
            if (callExit)
            {
                System.exit(1);
            }
            else
            {
                return;
            }
        }
        else
        {
            String cmd = args[0];
            args[0] = null;
            if ("split".equalsIgnoreCase(cmd))
            {
                MainSplit.main(args, in, out);
            }
            else if ("combine".equalsIgnoreCase(cmd))
            {
                MainCombine.main(args, in, out);
            }
            else
            {
                out.println("Error: could not understand argument '" + cmd + "' - it must be " +
                                   "either 'split', 'combine', 'info' or 'bigintcs'");
                usage(out);
                if (callExit)
                {
                    System.exit(1);
                }
                else
                {
                    return;
                }
            }
        }

    }


    private static void usage(PrintStream out)
    {
        out.println("Usage:  java -jar secretshare.jar <split>|<combine>");
    }

    // ==================================================
    // class static data
    // ==================================================

    // ==================================================
    // class static methods
    // ==================================================

    // ==================================================
    // instance data
    // ==================================================

    // ==================================================
    // factories
    // ==================================================

    // ==================================================
    // constructors
    // ==================================================

    private Main()
    {
        // no instances
    }

    // ==================================================
    // public methods
    // ==================================================

    // ==================================================
    // non public methods
    // ==================================================
}
